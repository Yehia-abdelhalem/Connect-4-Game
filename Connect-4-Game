# Connect 4 Game

This is a simple **Connect 4** game created using **C** in **Visual Studio**. The game allows two players to take turns dropping colored discs into a 7x6 grid, with the objective of connecting four of their discs in a row either horizontally, vertically, or diagonally.

## Features
- Two-player local gameplay.
- Simple console-based interface.
- Displays the grid and checks for winning conditions.

## Getting Started

### Prerequisites
- Visual Studio (or any C++/C compatible IDE).
- .NET Framework (the project uses the standard C# framework).

### Instructions
1. Clone this repository or download the ZIP file.
2. Open the `Connect4Game.cs` file in Visual Studio.
3. Press **F5** to run the game.
4. Follow the on-screen prompts to play the game.

Here is the code for you to try 

Download raylib library first



#include <raylib.h>
#include <stdio.h>

#define ROWS 6
#define COLS 7
#define CELL_SIZE 100
#define SCREEN_WIDTH (COLS * CELL_SIZE)
#define SCREEN_HEIGHT (ROWS * CELL_SIZE)


int board[ROWS][COLS] = { 0 };

void DrawBoard();
int DropDisc(int col, int player);
int CheckWin(int player);

int main() {
    InitWindow(SCREEN_WIDTH, SCREEN_HEIGHT + 50, "Connect Four"); 
    SetTargetFPS(60);

    int currentPlayer = 1;
    int winner = 0; 

    while (!WindowShouldClose()) {
        
        if (winner == 0 && IsMouseButtonPressed(MOUSE_BUTTON_LEFT)) {
            Vector2 mouse = GetMousePosition(); 
            int col = mouse.x / CELL_SIZE; 
            if (col >= 0 && col < COLS) { 
                int row = DropDisc(col, currentPlayer);
                if (row != -1) { 
                    if (CheckWin(currentPlayer)) { 
                        winner = currentPlayer;
                    }
                    currentPlayer = (currentPlayer == 1) ? 2 : 1; 
                }
            }
        }

      
        BeginDrawing();
        ClearBackground(RAYWHITE);

        DrawBoard();

        if (winner != 0) {
            DrawText(TextFormat("Player %d Wins!", winner), 10, SCREEN_HEIGHT + 10, 20, RED);
        }
        else {
            DrawText(TextFormat("Player %d's Turn", currentPlayer), 10, SCREEN_HEIGHT + 10, 20, BLACK);
        }

        EndDrawing();
    }

    CloseWindow();
    return 0;
}

void DrawBoard() {
    for (int r = 0; r < ROWS; r++) {
        for (int c = 0; c < COLS; c++) {
            int x = c * CELL_SIZE;
            int y = r * CELL_SIZE;

            // Draw cell background
            DrawRectangle(x, y, CELL_SIZE, CELL_SIZE, BLUE);

            // Draw disc
            if (board[r][c] == 1) {
                DrawCircle(x + CELL_SIZE / 2, y + CELL_SIZE / 2, CELL_SIZE / 2 - 10, RED);
            }
            else if (board[r][c] == 2) {
                DrawCircle(x + CELL_SIZE / 2, y + CELL_SIZE / 2, CELL_SIZE / 2 - 10, YELLOW);
            }
            else {
                DrawCircle(x + CELL_SIZE / 2, y + CELL_SIZE / 2, CELL_SIZE / 2 - 10, WHITE);
            }
        }
    }
}

int DropDisc(int col, int player) {
    for (int row = ROWS - 1; row >= 0; row--) {
        if (board[row][col] == 0) { 
            board[row][col] = player; 
            return row; 
        }
    }
    return -1; 
}

int CheckWin(int player) {
    // Check horizontal, vertical, and diagonal lines
    for (int r = 0; r < ROWS; r++) {
        for (int c = 0; c < COLS; c++) {
            if (board[r][c] == player) {

                if (c + 3 < COLS &&
                    board[r][c + 1] == player &&
                    board[r][c + 2] == player &&
                    board[r][c + 3] == player) {
                    return 1;
                }
                if (r + 3 < ROWS &&
                    board[r + 1][c] == player &&
                    board[r + 2][c] == player &&
                    board[r + 3][c] == player) {
                    return 1;
                }
                if (r + 3 < ROWS && c + 3 < COLS &&
                    board[r + 1][c + 1] == player &&
                    board[r + 2][c + 2] == player &&
                    board[r + 3][c + 3] == player) {
                    return 1;
                }
                if (r + 3 < ROWS && c - 3 >= 0 &&
                    board[r + 1][c - 1] == player &&
                    board[r + 2][c - 2] == player &&
                    board[r + 3][c - 3] == player) {
                    return 1;
                }
            }
        }
    }
    return 0;
}
